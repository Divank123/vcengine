// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String
  username      String   @unique
  email         String   @unique
  passwordHash  String
  refreshToken  String   @unique
  avatarUrl     String?
  createdAt     DateTime @default(now())
  lastUpdatedAt DateTime

  Workspace Workspace[]
  Branch    Branch[]
}

enum WorkspaceType {
  Public
  Private
}

model Workspace {
  id           String        @id @default(uuid())
  createdBy    String
  name         String
  type         WorkspaceType
  banner       String?
  activeBranch String
  createdAt    DateTime      @default(now())

  User User @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // ActiveBranch Branch @relation(fields: [activeBranch], references: [id], onDelete: Cascade, onUpdate: Cascade)

  Videos Videos[]
  Branch Branch[]
}

model Videos {
  id           String   @id @default(uuid())
  title        String   @default("Untitled Video")
  workspace    String
  width        Int
  height       Int
  playlistFile String
  createdAt    DateTime @default(now())

  Workspace     Workspace       @relation(fields: [workspace], references: [id], onDelete: Cascade, onUpdate: Cascade)
  VideoVersions VideoVersions[]
}

model Segment {
  id               String @id @default(uuid())
  hash             String @unique
  numberOfInstance Int    @default(1)
}

model Branch {
  id          String   @id @default(uuid())
  name        String
  workspace   String
  createdBy   String
  headVersion String
  createdAt   DateTime @default(now())

  Workspace Workspace @relation(fields: [workspace], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User      User      @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Version   Versions  @relation(fields: [headVersion], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Versions {
  id            String   @id @default(uuid())
  branch        String
  commitMessage String
  parentVersion String?
  createdAt     DateTime @default(now())

  parent   Versions?  @relation("versionToChildern", fields: [parentVersion], references: [id])
  children Versions[] @relation("versionToChildern")
  // Version  Versions   @relation(references: [id], fields: [parentVersion])
  // Branch   Branch     @relation(references: [id], fields: [branch])

  VideoVersions VideoVersions[]
  Branch        Branch[]
}

enum changeType {
  Add
  Modified
  Revert
  Remove
}

model VideoVersions {
  id         String     @id @default(uuid())
  video      String
  version    String
  changeType changeType

  Video    Videos   @relation(references: [id], fields: [video])
  Versions Versions @relation(references: [id], fields: [version])
}

// enum PRType {
//   Open
//   Merged
//   Closed
// }

// model PullRequests {
//   id        String   @id @default(uuid())
//   workspace String
//   createdBy String
//   createdAt DateTime @default(now())
//   state     PRType

//   User      User       @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   Workspace Workspace  @relation(fields: [workspace], references: [id], onUpdate: Cascade)
//   Comments  Comments[]
// }

// enum IssuesState {
//   Open
//   Closed
// }

// model Issues {
//   id          String      @id @default(uuid())
//   issueNumber Int
//   createdBy   String
//   workspace   String
//   message     String
//   state       IssuesState
//   createdAt   DateTime    @default(now())

//   User      User      @relation(fields: [createdBy], references: [id])
//   Workspace Workspace @relation(fields: [workspace], references: [id])

//   Comments Comments[]
// }

// model Forks {
//   id              String   @id @default(uuid())
//   sourceWorkspace String
//   destWorkspace   String
//   forkedBy        String
//   onVersion       String
//   createdAt       DateTime @default(now())

//   User           User      @relation(fields: [forkedBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   Version        Versions  @relation(fields: [onVersion], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   Workspace_Src  Workspace @relation(fields: [destWorkspace], references: [id], onUpdate: Cascade)
//   Workspace_Dest Workspace @relation(fields: [sourceWorkspace], references: [id], onUpdate: Cascade)
// }

// enum PermissionType {
//   Viewer
//   Editor
//   Owner
// }

// model Permissions {
//   id        String         @id @default(uuid())
//   workspace String
//   role      PermissionType
//   userId    String
//   grantedBy String
//   createdAt DateTime       @default(now())

//   // User_To    User      @relation("UserFK", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   // User_Grant User      @relation("grantUserFK", fields: [grantedBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   Workspace Workspace @relation(fields: [workspace], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   User      User      @relation(fields: [userId], references: [id])
// }

// enum TargetType {
//   Issue
//   PR
// }

// model Comments {
//   id         String     @id @default(uuid())
//   message    String
//   createdBy  String
//   targetType TargetType
//   targetId   String
//   createdAt  DateTime   @default(now())

//   User           User          @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   // PullRequests PullRequests? @relation(fields: [targetId], references: [id])
//   // pullRequestsId String?
//   // Issues       Issues?       @relation(fields: [targetId], references: [id])
//   // issuesId       String?
//   PullRequests   PullRequests? @relation(fields: [pullRequestsId], references: [id])
//   pullRequestsId String?
//   Issues         Issues?       @relation(fields: [issuesId], references: [id])
//   issuesId       String?
// }
