// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  username     String   @unique
  email        String   @unique
  passwordHash String
  refreshToken String   @unique
  avatarUrl    String?
  createdAt    DateTime @default(now())

  Workspace Workspace[]
  Branch    Branch[]
  Issues    Issues[]
}

enum WorkspaceType {
  Public
  Private
}

model Workspace {
  id           String        @id @default(uuid())
  createdBy    String
  name         String
  type         WorkspaceType
  banner       String?
  activeBranch String?
  createdAt    DateTime      @default(now())

  User   User     @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Videos Videos[]
  Branch Branch[]
  Issues Issues[]
}

enum VideoState {
  Processing
  Uploaded
}

model Videos {
  id           String     @id @default(uuid())
  workspace    String
  width        Int
  height       Int
  version      String
  state        VideoState
  playlistFile String
  createdAt    DateTime   @default(now())

  Workspace Workspace @relation(fields: [workspace], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Version   Versions  @relation(fields: [version], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Segment {
  id               String @id @default(uuid())
  hash             String @unique
  numberOfInstance Int    @default(1)
}

model Branch {
  id          String   @id @default(uuid())
  name        String
  createdBy   String
  workspace   String
  headVersion String?
  createdAt   DateTime @default(now())

  User      User       @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Version   Versions?  @relation(fields: [headVersion], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Workspace Workspace? @relation(fields: [workspace], references: [id])
}

model Versions {
  id            String   @id @default(uuid())
  branch        String
  commitMessage String
  parentVersion String?
  createdAt     DateTime @default(now())

  parent   Versions?  @relation("versionToChildern", fields: [parentVersion], references: [id])
  children Versions[] @relation("versionToChildern")

  Branch Branch[]
  Videos Videos[]
}

enum changeType {
  Add
  Modified
  Revert
  Remove
}

enum IssuesState {
  Open
  Closed
}

model Issues {
  id          String      @id @default(uuid())
  issueNumber Int
  createdBy   String
  workspace   String
  message     String
  state       IssuesState
  createdAt   DateTime    @default(now())

  User      User      @relation(fields: [createdBy], references: [id])
  Workspace Workspace @relation(fields: [workspace], references: [id])
}
